"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function (f) {
    if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined") {
        module.exports = f();
    } else if (typeof define === "function" && define.amd) {
        define([], f);
    } else {
        var g;if (typeof window !== "undefined") {
            g = window;
        } else if (typeof global !== "undefined") {
            g = global;
        } else if (typeof self !== "undefined") {
            g = self;
        } else {
            g = this;
        }g.Stream = f();
    }
})(function () {
    var define, module, exports;return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
                    var n = t[o][1][e];return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
            }return n[o].exports;
        }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
            s(r[o]);
        }return s;
    }({ 1: [function (require, module, exports) {
            "use strict";

            module.exports = require('./lib/Stream');
        }, { "./lib/Stream": 2 }], 2: [function (require, module, exports) {
            var Callback = Symbol('Callback');
            var Children = Symbol('Children');
            var Initialized = Symbol('Initialized');

            module.exports = function () {
                function Stream() {
                    var cb = arguments.length <= 0 || arguments[0] === undefined ? function (data) {
                        return data;
                    } : arguments[0];

                    _classCallCheck(this, Stream);

                    this[Callback] = cb;
                    this[Children] = [];
                    this[Initialized] = false;
                }

                _createClass(Stream, [{
                    key: "notify",
                    value: function notify(data) {
                        var x = this[Callback](data);
                        this.data = data;
                        this[Initialized] = true;
                        for (var i in this[Children]) {
                            this[Children][i].notify(x);
                        }
                    }
                }, {
                    key: "then",
                    value: function then() {
                        var callback = arguments.length <= 0 || arguments[0] === undefined ? function (data) {
                            return data;
                        } : arguments[0];

                        var s = new Stream(callback);
                        this[Children].push(s);
                        if (this[Initialized]) {
                            s.notify(this.data);
                        }
                        return s;
                    }
                }, {
                    key: "map",
                    value: function map() {
                        var callback = arguments.length <= 0 || arguments[0] === undefined ? function (data) {
                            return data;
                        } : arguments[0];

                        return this.then(function (data) {
                            return data.map(callback);
                        });
                    }
                }]);

                return Stream;
            }();
        }, {}] }, {}, [1])(1);
});

